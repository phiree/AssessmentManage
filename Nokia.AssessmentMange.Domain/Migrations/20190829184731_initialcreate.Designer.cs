// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nokia.AssessmentMange.Domain.Infrastructure.EFCore;

namespace Nokia.AssessmentMange.Domain.Migrations
{
    [DbContext(typeof(AssessmentDbContext))]
    [Migration("20190829184731_initialcreate")]
    partial class initialcreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Nokia.AssessmentMange.Domain.DomainModels.Assessment", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<short>("Annual")
                        .HasColumnName("Annual")
                        .HasColumnType("bit");

                    b.Property<DateTime>("CreatedTime");

                    b.Property<string>("DepartmentId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Assessments");
                });

            modelBuilder.Entity("Nokia.AssessmentMange.Domain.DomainModels.AssessmentSubject", b =>
                {
                    b.Property<string>("AssessmentId");

                    b.Property<string>("SubjectId");

                    b.HasKey("AssessmentId", "SubjectId");

                    b.HasIndex("SubjectId");

                    b.ToTable("AssessmentSubjects");
                });

            modelBuilder.Entity("Nokia.AssessmentMange.Domain.DomainModels.Department", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name");

                    b.Property<string>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("Departments");
                });

            modelBuilder.Entity("Nokia.AssessmentMange.Domain.DomainModels.Person", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Birthday");

                    b.Property<string>("DepartmentId");

                    b.Property<string>("RealName");

                    b.Property<int>("Sex");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("Person");
                });

            modelBuilder.Entity("Nokia.AssessmentMange.Domain.DomainModels.PersonAssessmentGrade", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AssessmentId");

                    b.Property<bool>("IsAbsent");

                    b.Property<bool>("IsMakeup");

                    b.Property<string>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("AssessmentId");

                    b.HasIndex("PersonId");

                    b.ToTable("PersonGrades");
                });

            modelBuilder.Entity("Nokia.AssessmentMange.Domain.DomainModels.Subject", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<short>("IsQualifiedConversion")
                        .HasColumnName("IsQualifiedConversion")
                        .HasColumnType("bit");

                    b.Property<string>("Name");

                    b.Property<int>("SexLimitation");

                    b.Property<int>("SubjectType");

                    b.Property<string>("Unit");

                    b.HasKey("Id");

                    b.ToTable("Subjects");
                });

            modelBuilder.Entity("Nokia.AssessmentMange.Domain.DomainModels.SubjectGrade", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<double?>("Grade");

                    b.Property<string>("PersonAssessmentGradeId");

                    b.Property<string>("SubjectId");

                    b.HasKey("Id");

                    b.HasIndex("PersonAssessmentGradeId");

                    b.HasIndex("SubjectId");

                    b.ToTable("SubjectGrade");
                });

            modelBuilder.Entity("Nokia.AssessmentMange.Domain.DomainModels.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsAdmin");

                    b.Property<string>("LoginName");

                    b.Property<string>("Password");

                    b.Property<string>("PersonId");

                    b.HasKey("Id");

                    b.HasIndex("PersonId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Nokia.AssessmentMange.Domain.DomainModels.AssessmentSubject", b =>
                {
                    b.HasOne("Nokia.AssessmentMange.Domain.DomainModels.Assessment", "Assessment")
                        .WithMany("Subjects")
                        .HasForeignKey("AssessmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Nokia.AssessmentMange.Domain.DomainModels.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Nokia.AssessmentMange.Domain.DomainModels.Department", b =>
                {
                    b.HasOne("Nokia.AssessmentMange.Domain.DomainModels.Department", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Nokia.AssessmentMange.Domain.DomainModels.Person", b =>
                {
                    b.HasOne("Nokia.AssessmentMange.Domain.DomainModels.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId");
                });

            modelBuilder.Entity("Nokia.AssessmentMange.Domain.DomainModels.PersonAssessmentGrade", b =>
                {
                    b.HasOne("Nokia.AssessmentMange.Domain.DomainModels.Assessment", "Assessment")
                        .WithMany()
                        .HasForeignKey("AssessmentId");

                    b.HasOne("Nokia.AssessmentMange.Domain.DomainModels.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");
                });

            modelBuilder.Entity("Nokia.AssessmentMange.Domain.DomainModels.Subject", b =>
                {
                    b.OwnsMany("Nokia.AssessmentMange.Domain.DomainModels.SubjectConversion", "SubjectConversions", b1 =>
                        {
                            b1.Property<string>("SubjectId");

                            b1.Property<int>("Sex");

                            b1.HasKey("SubjectId", "Sex");

                            b1.ToTable("SubjectConversion");

                            b1.HasOne("Nokia.AssessmentMange.Domain.DomainModels.Subject")
                                .WithMany("SubjectConversions")
                                .HasForeignKey("SubjectId")
                                .OnDelete(DeleteBehavior.Cascade);

                            b1.OwnsMany("Nokia.AssessmentMange.Domain.DomainModels.AgeConversion", "AgeConversions", b2 =>
                                {
                                    b2.Property<string>("SubjectId");

                                    b2.Property<int>("Sex");

                                    b2.Property<int>("FloorAge");

                                    b2.HasKey("SubjectId", "Sex", "FloorAge");

                                    b2.ToTable("AgeConversion");

                                    b2.HasOne("Nokia.AssessmentMange.Domain.DomainModels.SubjectConversion")
                                        .WithMany("AgeConversions")
                                        .HasForeignKey("SubjectId", "Sex")
                                        .OnDelete(DeleteBehavior.Cascade);

                                    b2.OwnsOne("Nokia.AssessmentMange.Domain.DomainModels.AgeRange", "AgeRange", b3 =>
                                        {
                                            b3.Property<string>("AgeConversionSubjectId");

                                            b3.Property<int>("AgeConversionSex");

                                            b3.Property<int>("AgeConversionFloorAge");

                                            b3.Property<int>("CellingAge");

                                            b3.Property<int>("FloorAge");

                                            b3.HasKey("AgeConversionSubjectId", "AgeConversionSex", "AgeConversionFloorAge");

                                            b3.ToTable("AgeConversion");

                                            b3.HasOne("Nokia.AssessmentMange.Domain.DomainModels.AgeConversion")
                                                .WithOne("AgeRange")
                                                .HasForeignKey("Nokia.AssessmentMange.Domain.DomainModels.AgeRange", "AgeConversionSubjectId", "AgeConversionSex", "AgeConversionFloorAge")
                                                .OnDelete(DeleteBehavior.Cascade);
                                        });

                                    b2.OwnsMany("Nokia.AssessmentMange.Domain.DomainModels.ScoreGrade", "ScoreGrades", b3 =>
                                        {
                                            b3.Property<string>("SubjectId");

                                            b3.Property<int>("Sex");

                                            b3.Property<int>("FloorAge");

                                            b3.Property<double>("Score");

                                            b3.Property<double>("Grade");

                                            b3.HasKey("SubjectId", "Sex", "FloorAge", "Score");

                                            b3.ToTable("ScoreGrade");

                                            b3.HasOne("Nokia.AssessmentMange.Domain.DomainModels.AgeConversion")
                                                .WithMany("ScoreGrades")
                                                .HasForeignKey("SubjectId", "Sex", "FloorAge")
                                                .OnDelete(DeleteBehavior.Cascade);
                                        });
                                });
                        });
                });

            modelBuilder.Entity("Nokia.AssessmentMange.Domain.DomainModels.SubjectGrade", b =>
                {
                    b.HasOne("Nokia.AssessmentMange.Domain.DomainModels.PersonAssessmentGrade")
                        .WithMany("Grades")
                        .HasForeignKey("PersonAssessmentGradeId");

                    b.HasOne("Nokia.AssessmentMange.Domain.DomainModels.Subject", "Subject")
                        .WithMany()
                        .HasForeignKey("SubjectId");
                });

            modelBuilder.Entity("Nokia.AssessmentMange.Domain.DomainModels.User", b =>
                {
                    b.HasOne("Nokia.AssessmentMange.Domain.DomainModels.Person", "Person")
                        .WithMany()
                        .HasForeignKey("PersonId");
                });
#pragma warning restore 612, 618
        }
    }
}
